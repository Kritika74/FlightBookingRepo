<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="expapi-suite.xml" />
	<munit:test name="get:\flight:Flight-config-test-success" doc:id="18fd5167-6a83-4d65-b6a4-b458a9d8d42d" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="ada614a5-9364-47fe-a19b-03869ade06a9" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="099d8420-d7fd-4412-8130-26c05c8109be" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getflightFlightconfigtestsuccess\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getflightFlightconfigtestsuccess\mock_variable_.dwl')]" />
						<munit-tools:variable key="source" value="#[output application/java --- readUrl('classpath://getflightFlightconfigtestsuccess\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="destination" value="#[output application/java --- readUrl('classpath://getflightFlightconfigtestsuccess\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="airline" value="#[output application/java --- readUrl('classpath://getflightFlightconfigtestsuccess\mock_variable_3.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="bfc862cf-0414-4e00-8d0c-cf42d9018efc" >
				<munit:payload value="#[readUrl('classpath://getflightFlightconfigtestsuccess\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getflightFlightconfigtestsuccess\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getflightFlightconfigtestsuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\flight:Flight-config" doc:id="13ca1db6-8334-442b-b70a-33e2d0421470" name="get:\flight:Flight-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="80d78f40-9442-41e5-8df7-a7f1c99b6321" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getflightFlightconfigtestsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\flight\(name):Flight-config-test-success" doc:id="253b7ede-b99c-44b3-99dc-f77f375b0dac" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="c0e98a79-0175-43f8-bae2-1c3cdad3d6a6" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="6cff3439-4180-4104-9b02-e98d7e79e22e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getflightnameFlightconfigtestsuccess\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getflightnameFlightconfigtestsuccess\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getflightnameFlightconfigtestsuccess\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="be906807-d746-4938-9c26-0d25b6b16268" >
				<munit:payload value="#[readUrl('classpath://getflightnameFlightconfigtestsuccess\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getflightnameFlightconfigtestsuccess\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getflightnameFlightconfigtestsuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\flight\(name):Flight-config" doc:id="f5cf52be-0c35-4ae2-8a9e-7a548b6b77d0" name="get:\flight\(name):Flight-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="683f20d2-3d3b-4cfb-804b-0769d54efaac" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getflightnameFlightconfigtestsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\flight:application\json:Flight-config-test-success" doc:id="dbc75f5e-3537-406a-8293-86c2c9e3654f" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="dad11347-9791-4e1a-a841-a213c478bc2e" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="f9338196-dbc0-40a9-8685-e72e69944002" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://postflightapplicationjsonFlightconfigtestsuccess\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="noOfSeats" value="#[output application/java --- readUrl('classpath://postflightapplicationjsonFlightconfigtestsuccess\mock_variable_.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postflightapplicationjsonFlightconfigtestsuccess\mock_variable_1.dwl')]" />
						<munit-tools:variable key="flightNo" value="#[output application/java --- readUrl('classpath://postflightapplicationjsonFlightconfigtestsuccess\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="name" value="#[output application/java --- readUrl('classpath://postflightapplicationjsonFlightconfigtestsuccess\mock_variable_3.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="fc862b0c-4931-46df-a7c8-00057e99f80d" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postflightapplicationjsonFlightconfigtestsuccess\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postflightapplicationjsonFlightconfigtestsuccess\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postflightapplicationjsonFlightconfigtestsuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\flight:application\json:Flight-config" doc:id="c7ebee85-d396-41ad-9bd2-4ae4a918fc3e" name="post:\flight:application\json:Flight-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="3b1413ae-dd76-4989-936b-bcda5dac29c5" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postflightapplicationjsonFlightconfigtestsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\flight:application\json:Flight-config-test-wrongid" doc:id="a007ca70-12d5-4c06-8c7a-5316a0338377" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="77f7d184-dd28-4a6b-83aa-f9b8d621c2a8" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="f9338196-dbc0-40a9-8685-e72e69944002" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://postflightapplicationjsonFlightconfigtestwrongid\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="noOfSeats" value="#[output application/java --- readUrl('classpath://postflightapplicationjsonFlightconfigtestwrongid\mock_variable_.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postflightapplicationjsonFlightconfigtestwrongid\mock_variable_1.dwl')]" />
						<munit-tools:variable key="flightNo" value="#[output application/java --- readUrl('classpath://postflightapplicationjsonFlightconfigtestwrongid\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="name" value="#[output application/java --- readUrl('classpath://postflightapplicationjsonFlightconfigtestwrongid\mock_variable_3.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="be150f25-f133-4497-88d6-c2cd8d686ee7" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postflightapplicationjsonFlightconfigtestwrongid\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postflightapplicationjsonFlightconfigtestwrongid\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postflightapplicationjsonFlightconfigtestwrongid\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\flight:application\json:Flight-config" doc:id="623ea0c9-71cc-4d66-ba9f-f2fe516a556c" name="post:\flight:application\json:Flight-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="847f8575-ad54-47f6-ae31-b828c8cc71a9" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postflightapplicationjsonFlightconfigtestwrongid::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="put:\flight:application\json:Flight-config-test-success" doc:id="6aaf8f1d-fa21-4798-8b60-0af20b249af1" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="1ae0058a-4caf-44b1-b44d-3bc05cbf7bf9" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="1ddb313b-35c4-48cf-9b11-d494f7d4a2e8" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://putflightapplicationjsonFlightconfigtestsuccess\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://putflightapplicationjsonFlightconfigtestsuccess\mock_variable_.dwl')]" />
						<munit-tools:variable key="bookingNo" value="#[output application/java --- readUrl('classpath://putflightapplicationjsonFlightconfigtestsuccess\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="noOfSeatsD" value="#[output application/java --- readUrl('classpath://putflightapplicationjsonFlightconfigtestsuccess\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="187d38d8-e888-4a64-9fce-765c17522ac8" >
				<munit:payload value="#[output application/json --- readUrl('classpath://putflightapplicationjsonFlightconfigtestsuccess\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://putflightapplicationjsonFlightconfigtestsuccess\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://putflightapplicationjsonFlightconfigtestsuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to put:\flight:application\json:Flight-config" doc:id="fe401665-eb90-4fb8-8e47-815059505924" name="put:\flight:application\json:Flight-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="fd0e9be0-1039-4458-9777-a652feba6fa7" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import putflightapplicationjsonFlightconfigtestsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="put:\flight:application\json:Flight-config-test-wrongbookingno" doc:id="d022cf71-16ca-4362-a6a8-9258354d1922" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="47280858-a373-4a41-979b-7debfb8e531b" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="1ddb313b-35c4-48cf-9b11-d494f7d4a2e8" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://putflightapplicationjsonFlightconfigtestwrongbookingno\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://putflightapplicationjsonFlightconfigtestwrongbookingno\mock_variable_.dwl')]" />
						<munit-tools:variable key="bookingNo" value="#[output application/java --- readUrl('classpath://putflightapplicationjsonFlightconfigtestwrongbookingno\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="noOfSeatsD" value="#[output application/java --- readUrl('classpath://putflightapplicationjsonFlightconfigtestwrongbookingno\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="82d3375d-62b8-423e-ad4f-d434260162aa" >
				<munit:payload value="#[output application/json --- readUrl('classpath://putflightapplicationjsonFlightconfigtestwrongbookingno\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://putflightapplicationjsonFlightconfigtestwrongbookingno\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://putflightapplicationjsonFlightconfigtestwrongbookingno\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to put:\flight:application\json:Flight-config" doc:id="caa4ba4a-252b-4bdf-b694-c0f6d969cde8" name="put:\flight:application\json:Flight-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ab41952d-cff6-47ab-bb85-56e566cd3f2f" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import putflightapplicationjsonFlightconfigtestwrongbookingno::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
